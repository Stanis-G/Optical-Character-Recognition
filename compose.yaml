services:

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    ports:
      - ${MINIO_API_PORT}:${MINIO_API_PORT}
      - ${MINIO_UI_PORT}:${MINIO_UI_PORT}
    volumes:
      - minio_data:/data
    command: minio server --address ":${MINIO_API_PORT}" --console-address ":${MINIO_UI_PORT}" /data
    restart: always
  
  airflow:
    image: apache/airflow:latest
    container_name: airflow
    ports:
      - ${AIRFLOW_PORT}:${AIRFLOW_PORT}
    environment:
      - _AIRFLOW_DB_MIGRATE=true
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=${_AIRFLOW_WWW_USER_USERNAME}
      - _AIRFLOW_WWW_USER_PASSWORD=${_AIRFLOW_WWW_USER_PASSWORD}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:${REDIS_PORT}/0
      - AIRFLOW__CELERY__RESULT_BACKEND=redis://redis:${REDIS_PORT}/0
    command: ["bash", "-c", airflow webserver --port 8080 & airflow scheduler"]
    volumes:
      - dags:/opt/airflow/dags
    networks:
      - airflow_network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    restart: always
    networks:
      - airflow_network
  
  worker:
    build: ./trocr/train/
    image: worker
    container_name: airflow_worker
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:${REDIS_PORT}/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+sqlite:////opt/airflow/airflow.db
    command: ["bash", "-c", "airflow celery worker"]
    networks:
      - airflow_network

  mlflow:
    image: ghcr.io/mlflow/mlflow
    container_name: mlflow
    environment:
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:${MINIO_API_PORT}
    ports:
      - ${MLFLOW_PORT}:${MLFLOW_PORT}
    command: mlflow server --host 0.0.0.0 --port ${MLFLOW_PORT}
    volumes:
      - mlflow_data:/mlflow
    restart: always

  trocr_api:
    build:
      dockerfile: trocr/api/Dockerfile
      args:
        MODEL_NAME: ${MODEL_NAME}
    container_name: trocr_api
    ports:
      - "${API_PORT}:${API_PORT}"
    networks:
      - api_network
  
  trocr_bot:
    build:
      dockerfile: bot/Dockerfile
    container_name: trocr_bot
    depends_on:
      - trocr_api
    networks:
      - api_network

volumes:
  minio_data:
  dags:
  mlflow_data:

networks:
  api_network:
    driver: bridge
  airflow_network:
    driver: bridge